#summary 解释器的架构
#labels Featured,Phase-Implementation

= 词法分析 =
使用[http://www.dabeaz.com/ply/ PLY]工具中lex 工具.

= 语法分析 =

== 建立抽象语法树 ==
使用[http://www.dabeaz.com/ply/ PLY]工具中yacc 工具.
这一步没有做过多的处理,只是生成了抽象语法树
== 进一步分析 ==
这一步在抽象语法树的基础上,分析程序结构.处理程序的"声明"部分.
  * 类型定义
  * 函数定义
  * 常量/变量定义等等.

建立执行环境.

= 静态语义检查 =
详细内容见 StaticSemantic

= 解释 =
在抽象语法树上执行程序.
包含表达式计算引擎,流程控制处理,名字空间维护等等功能.

= 错误处理 =
解释器的错误处理分为三块.
  * 词法分析部分 对于非法字符,简单的抛弃并报错
  * 语法分析部分 对于不符合语法规则的情况,立即报错。并停止分析.
  * 语义错误  目前没有静态语义检查.在运行时发现语义错误(比如类型错误等等),抛出异常，打印调用栈，错误位置并终止程序.

错误处理输出的信息包含以下内容:
  * 发生错误的位置 (至少定位到行)
  * 如果是语义错误, 打印调用栈.
  * 给出适当,详细,有用的错误信息.

