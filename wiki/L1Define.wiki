#summary L1语言定义
#labels Featured,Phase-Design

L1 (aka SmallC) 语言的定义

= 语法 =
{{{
(1) <prog> ::= {<classdecl>}[<condecl>][<vdecl>] <fdef>{<fdef>}
(2) <classdecl> ::= 'class' id '{' <decllist> '}'
(3) <decllist> ::= <decl>{ ';' <decl>}
(4) <decl> ::= <type> <idlist>
(5) <type> ::= id {'[]'}
(6) <idlist> ::= id {',' id }
(7) <condecl> ::= 'const' <condef>{ ',' <condef>} ';'
(8) <condef> ::= id '=' [ '-' ] num
(9) <vdecl> ::= 'var' <decllist> 'end'
(10) <fdef> ::= 'func' <type> <head> '{' [<vdecl>]<stlist> '}'
(11) <head> ::=id '('[<paralist>]')'
(12) <paralist> ::= <paradecl>{','<paradecl>}
(13) <paradecl> ::= <type> id
(14) <stlist>::= <st>{';'<st>}
(15) <st>::= <exp> | <cond> | <loop>
(16) <cond> ::= 'if' '(' <exp> ')' <st>[ 'else' <st>]
(17) <loop> ::= 'while' '(' <exp> ')' [<st>]
(18) <exp> ::= <orexp>[ '=' <orexp>]
(19) <orexp> ::= <andexp>{ '||' <andexp>}
(20) <andexp> ::= <relexp>{ '&&' <relexp>}
(21) <relexp> ::= <term>[<relop> <term>]
(22) <relop> ::= '==' | '!=' | '<' | '>' | '<=' | '>='
(23) <term> ::= <factor>{<addop> <factor>}
(24) <addop> ::= '+' | '-'
(25) <factor> ::= <uniexp>{<multop> <uniexp>}
(26) <multop> ::= '*' | '/' | '%'
(27) <uniexp> ::= {<uniop>}<postexp>
(28) <uniop> ::= '-' | '!' | '++' | '--' | 'chk'
(29) <postexp> ::= <entity>{<postfix>}
(30) <postfix> ::= '++' | '--' | <apara> | <sub> | <aselect> | <tcast>
(31) <apara> ::= '(' [<exp>{ ',' <exp>}] ')'
(32) <sub> ::= '[' <exp> ']'
(33) <aselect> ::= '.' id
(34) <tcast> ::= ':' <type>
(35) <entity> ::= id | num |<cast> | <alloc> | '?'
(36)<cast> ::= '('<stlist>')'
(37)<alloc> ::= 'new' <type> [ '[' <exp> ']' ]
}}}

= 静态语义 =

== 类型系统 ==
L1 语言支持如下基本类型:
  * int 整形
  * void 不存在这个类型的对象
  * nulltype 可能值只有一个特殊的null

支持如下的组合类型:
  * array 数组 数组元素类型可以是任何合法的L1类型，但是各个元素类型必须一致
  * class 结构体 类似C 的结构体

== 操作符/运算符 ==

===操作符分组列表===
|| 名称 	|| 操作符 	|| 优先级 || 结合性 || 说明 ||
|| 赋值 	|| =      	|| 0      || 左     ||      || 
|| 逻辑或 	|| \|\|   	|| 1      || 左     ||      ||
|| 逻辑与 	|| &&     	|| 2      || 左     ||      ||
|| 关系1 	|| == !=  	|| 3      || 左     ||      ||
|| 关系2 	|| < <= > >=|| 3      || 左     ||      ||
|| 加减 	|| + -   	|| 4      || 左     ||      ||
|| 乘除 	|| * / %   	|| 5      || 左     ||      ||
|| 前缀单目 || - ! ++ --|| 6  	  || 右     ||      ||
|| 异常处理 || chk   	|| 6      || 右     ||      ||
|| 后缀1    || ++ --   	|| 7      || 左     ||      ||
|| 后缀2    || []   	|| 7      || 左     || 数组下标操作||
|| 后缀3    || .    	|| 7      || 左     || 类成员操作||
|| 后缀3    || ()    	|| 8      || 左     || 函数调用||
|| 括号     || ()    	|| 9      || 左     || ||

说明: 以上表格中的优先级和结合性信息实际上属于语法的范畴，并且这些信息已经蕴含在上面的产生式中.

===类型的语义和实现===
下面将对每一个类型论述其静态,动态语义,同时给出对应的实现的方法.
  # void 基本类型
    不支持任何操作符
  # int 基本类型
	支持的操作符如下表所列
|| 操作符 	|| 实现用标识符 || 附加参数类型 || 操作结果类型 || 备注 ||  
|| = 		|| assign 		|| int 			|| int 			|| 		||  
|| \|\| 	|| or 			|| int 			|| int 			|| 		||  
|| && 		|| and	 		|| int 			|| int 			|| 		||  
|| == 		|| eq	 		|| int 			|| int 			|| 		||  
|| != 		|| ne	 		|| int 			|| int 			|| 		||  
|| < 		|| lt	 		|| int 			|| int 			|| 		||  
|| <= 		|| le	 		|| int 			|| int 			|| 		||  
|| > 		|| gt	 		|| int 			|| int 			|| 		||  
|| >= 		|| ge	 		|| int 			|| int 			|| 		||  
|| + 		|| add	 		|| int 			|| int 			|| 		||  
|| - 		|| minus 		|| int 			|| int 			|| 		||  
|| * 		|| mul	 		|| int 			|| int 			|| 		||  
|| / 		|| div	 		|| int 			|| int 			|| 		||  
|| % 		|| mod	 		|| int 			|| int 			|| 		||  
|| - 		|| minus_		|| - 			|| int 			|| 负号 ||  
|| ! 		|| not			|| - 			|| int 			|| 		||  
|| chk 		|| chk			|| - 			|| int 			|| 		||  
|| ++ 		|| inc			|| - 			|| int 			|| 前缀	||  
|| ++ 		|| inc_			|| - 			|| int 			|| 后缀	||  
|| -- 		|| dec			|| - 			|| int 			|| 前缀	||  
|| -- 		|| dec_			|| - 			|| int 			|| 后缀	||  

  * 赋值  	(=)      除void , nulltype 外的所有类型都支持赋值运算(=),组合类型的赋值只是一个引用(类似Java).
  * 逻辑  	(&&, ||) int支持逻辑运算 与或非. 非零为真,0 为假. 结果是 1 或 0
  * 关系1	(==, !=) 关系运算的结果是int型的0 或1 除void 类型外所有类型都支持关系运算符 == 和 != int 还支持关系运算符 < <= > >=
  * 关系2	(<, <= , > , >=)
  * 算术运算	(+, -, *, / , %) int支持基本的算术运算。同C 语言一致。(语义,优先级,结合性)
  * 自增和自减 int 类型支持++ 和 -- ,同C 语言一样有前缀和后缀之分
  * 下标操作 array 支持 [] 运算, 数组越界时抛出 IndexError
  * 成员操作 class 支持 .  运算, 试图访问不存在的成员是抛出 MemberError
  * chk操作 内置的异常处理 int 型支持,值为0是抛出ChkError,并退出.

|| 类型 || 操作符(集) 	|| 类型约束	|| 其他说明||
|| int ||          	||
以上所有的双目操作符都要求类型匹配:
  * 相同类型
  * 对于组合类型, 同nulltype 匹配

= 流程控制 =
L1 支持条件和循环结构
具体语法见上面的语法定义

= 函数 =
L1 支持函数定义和调用
  * 参数定义 同C语言一样,不过不支持默认参数
  * 返回值   没有return 语句, 将函数中最后一个语句的值作为返回值.
  * 调用     函数调用语法同C语言一样

L1 语言的入口函数是 main , main函数一般是一个无参并返回void 的函数

