
Kernel C 的具体语法：
(1) <prog> ::= <fdef>{<fdef>}
(2)<fdef> ::= 'func' id '{' <stlist> '}'
(3)<stlist>::= <st>{';'<st>}
(4)<st>::= <exp> | <cond> | <loop>
(5)<cond> ::= 'if' '(' <exp> ')' <st>[ 'else' <st>]
(6)<loop> ::= 'while' '(' <exp> ')' [<st>]
(7)<exp> ::= <orexp>[ '=' <orexp>]
(8)<orexp> ::= <andexp>{ '||' <andexp>}
(9)<andexp> ::= <relexp>{ '&&' <relexp>}
(10)<relexp> ::= <term>[<relop> <term>]
(11)<relop> ::= '==' | '!=' | '<' | '>' | '<=' | '>='
(12)<term> ::= <factor>{<addop> <factor>}
(13)<addop> ::= '+' | '-'
(14)<factor> ::= <uniexp>{<multop> <uniexp>}
(15)<multop> ::= '*' | '/' | '%'
(16)<uniexp> ::= {<uniop>}<postexp
(17)<uniop> ::= '-' | '!' | '++' | '--' | 'chk' | '*' | '@'
(18)<postexp> ::= <entity>{<postfix>}
(19) <postfix>::= '++' | '--'
(20)<entity> ::= num | id '(' ')' | '?' | '#' | <cast>
(21)<cast> ::= '('<stlist>')'



 1: func gcd { chk (*1>1 && *2>1);
 2:   while (*2!=0)(
 3:     3=*1%*2; 1=*2; 2=*3);
 4:   *1 }
 5: func main {
 6:   while (!eof())( 1=read();
 7:     if (!eof())(
 8:       print(*1); print(2=read());
 9:       print(gcd()); println())) }
6, 4, 2,
54, 81, 27,
16, 88, 8,
15, 64, 1,


 1: func gcd { 1=*1+*2; *1=*2; 2=4;
 2:   chk (*(*1+1)>1 && *(*1+2)>1);
 3:   while (*(*1+2)!=0)(
 4:     *1+3=*(*1+1)%*(*1+2); *1+1=*(*1+2); *1+2=*(*1+3));
 5:   3=*(*1+1); 2=**1; 1=*1-*2; *3 }
 6: func main { 1=10; 2=2;
 7:   while (!eof())( *1+1=read();
 8:     if (!eof())(
 9:       print(*1+*2+1=*(*1+1)); print(*1+*2+2=read());
10:       print(gcd()); println())) }
6, 4, 2,
54, 81, 27,
16, 88, 8,
15, 64, 1,


 1: func gcd { *2-2-1=*1; 1=*2-2-1; 2=*1+4+1;
 2:   chk (*(*1+1)>1 && *(*1+2)>1);
 3:   while (*(*1+2)!=0)(
 4:     *1+3=*(*1+1)%*(*1+2); *1+1=*(*1+2); *1+2=*(*1+3));
 5:   3=*(*1+1); 2=*1; 1=**1; *3 }
 6: func main { 1=10; 2=*1+2+1;
 7:   while (!eof())( *1+1=read();
 8:     if (!eof())( ++2;
 9:       print(2++=*(*1+1)); print(2++=read());
10:       print(gcd()); println())) }
6, 4, 2,
54, 81, 27,
16, 88, 8,
15, 64, 1,


 1: func gcd {
 2:   if (*2==0) *1
 3:   else (3=*1%*2; 1=*2; 2=*3; gcd()) }
 4: func main {
 5:   while (!eof())( 1=read();
 6:     if (!eof())( 2=read();
 7:       chk (*1>1 && *2>1);
 8:       print(*1); print(*2);
 9:       print(gcd()); println())) }
6, 4, 2,
54, 81, 27,
16, 88, 8,
15, 64, 1,


 1: func gcd { 1=*1+*2; *1=*2; 2=3;
 2:   if (*(*1+2)==0) 3=*(*1+1)
 3:   else (*1+*2+1=*(*1+2); *1+*2+2=*(*1+1)%*(*1+2); 3=gcd());
 4:   2=**1; 1=*1-*2; *3 }
 5: func main { 1=10; 2=3;
 6:   while (!eof())( *1+1=read();
 7:     if (!eof())( *1+2=read();
 8:       chk (*(*1+1)>1 && *(*1+2)>1);
 9:       print(*1+*2+1=*(*1+1)); print(*1+*2+2=*(*1+2));
10:       print(gcd()); println())) }
6, 4, 2,
54, 81, 27,
16, 88, 8,
15, 64, 1,


 1: func gcd { *2-2-1=*1; 1=*2-2-1; 2=*1+2+1;
 2:   if (*(*1+2)==0) 3=*(*1+1)
 3:   else ( ++2; 2++=*(*1+2); 2++=*(*1+1)%*(*1+2); 3=gcd());
 4:   2=*1; 1=**1; *3 }
 5: func main { 1=10; 2=*1+2+1;
 6:   while (!eof())( *1+1=read();
 7:     if (!eof())( *1+2=read();
 8:       chk (*(*1+1)>1 && *(*1+2)>1); ++2;
 9:       print(2++=*(*1+1)); print(2++=*(*1+2));
10:        print(gcd()); println())) }
6, 4, 2,
54, 81, 27,
16, 88, 8,
15, 64, 1,


 1: func ggcd {
 2:   chk (*1>1 && *2>1);
 3:   5=1; 6=0; 7=0; 8=1;
 4:   while (*2!=0)(
 5:     3=*1%*2; 4=*1/*2;
 6:     1=*2; 2=*3; 9=*5-*4**7;
 7:     10=*6-*4**8; 5=*7; 7=*9;
 8:     6=*8; 8=*10);
 9:   *1 }
10: func main {
11:   while (!eof())( 1=read();
12:     if (!eof())( 2=read();
13:       print(*1); 12=*2; 11=ggcd();
14:       print(*5); print(*12); print(*6);
15:       print(*11); println())) }
6, 1, 4, -1, 2,
54, -1, 81, 1, 27,
16, -5, 88, 1, 8,
15, -17, 64, 4, 1,


 1: func new { *4=*5; 4=*4+*5+1; *4-*5-1 }
 2: func ggcd { 1=*1+*2; *1=*2; 2=11;
 3:   chk (*(*1+1)>1 && *(*1+2)>1);
 4:   *1+5=1; *1+6=0; *1+7=0; *1+8=1;
 5:   while (*(*1+2)!=0)(
 6:     *1+3=*(*1+1)%*(*1+2); *1+4=*(*1+1)/*(*1+2);
 7:     *1+1=*(*1+2); *1+2=*(*1+3); *1+9=*(*1+5)-*(*1+4)**(*1+7);
 8:     *1+10=*(*1+6)-*(*1+4)**(*1+8); *1+5=*(*1+7); *1+7=*(*1+9);
 9:     *1+6=*(*1+8); *1+8=*(*1+10));
10:   5=3; 3=new(); *3+1=*(*1+5); *3+2=*(*1+6); *3+3=*(*1+1);
11:   2=**1; 1=*1-*2; *3 }
12: func main { 1=10; 2=4; 4=4000000;
13:   while (!eof())( *1+1=read();
14:     if (!eof())( *1+2=read(); *1+*2+1=*(*1+1); *1+*2+2=*(*1+2);
15:       *1+3=ggcd(); print(*(*1+1)); print(*(*(*1+3)+1));
16:       print(*(*1+2)); print(*(*(*1+3)+2));
17:       print(*(*(*1+3)+3)); println())) }
6, 1, 4, -1, 2,
54, -1, 81, 1, 27,
16, -5, 88, 1, 8,
15, -17, 64, 4, 1,


 1: func new { *4=*5; 4=*4+*5+1; *4-*5-1 }
 2: func ggcd { *2-2-1=*1; 1=*2-2-1; 2=*1+10+1;
 3:   chk (*(*1+1)>1 && *(*1+2)>1);
 4:   *1+5=1; *1+6=0; *1+7=0; *1+8=1;
 5:   while (*(*1+2)!=0)(
 6:     *1+3=*(*1+1)%*(*1+2); *1+4=*(*1+1)/*(*1+2);
 7:     *1+1=*(*1+2); *1+2=*(*1+3); *1+9=*(*1+5)-*(*1+4)**(*1+7);
 8:     *1+10=*(*1+6)-*(*1+4)**(*1+8); *1+5=*(*1+7); *1+7=*(*1+9);
 9:     *1+6=*(*1+8); *1+8=*(*1+10));
10:   5=3; 3=new(); *3+1=*(*1+5); *3+2=*(*1+6); *3+3=*(*1+1);
11:   2=*1; 1=**1; *3 }
12: func main { 1=10; 2=*1+3+1; 4=4000000;
13:   while (!eof())( *1+1=read();
14:     if (!eof())( *1+2=read(); ++2; 2++=*(*1+1); 2++=*(*1+2);
15:       *1+3=ggcd(); print(*(*1+1)); print(*(*(*1+3)+1));
16:       print(*(*1+2)); print(*(*(*1+3)+2));
17:       print(*(*(*1+3)+3)); println())) }
6, 1, 4, -1, 2,
54, -1, 81, 1, 27,
16, -5, 88, 1, 8,
15, -17, 64, 4, 1,


 1: func sift { 3=2;
 2:   while (*3**3<*1)(
 3:     4=*3**3;
 4:     while (*4<*1)(
 5:       *2+*4=1; 4=*4+*3);
 6:     while (*(*2+(++3)))) }
 7: func main { 1=100; 2=10;
 8:   sift(); 5=2;
 9:   while (*5<*1)(
10:     if (!*(*2+*5))( print(*5); println());
11:     ++5) }
2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97,

 1: func new { *4=*5; 4=*4+*5+1; *4-*5-1 }
 2: func sift { 1=*1+*2; *1=*2; 2=4; *1+2=2;
 3:   while (*(*1+2)**(*1+2)<**(*1+1))(
 4:     *1+3=*(*1+2)**(*1+2);
 5:     while (*(*1+3)<**(*1+1))(
 6:       *(*1+1)+*(*1+3)+1=1; *1+3=*(*1+3)+*(*1+2));
 7:     while (*(*(*1+1)+(++(*1+2))+1)));
 8:   2=**1; 1=*1-*2 }
 9: func main { 1=10; 2=4; 4=4000000; *1+1=100;
10:   5=*(*1+1); *1+2=new(); *1+*2+1=*(*1+2);
11:   sift(); *1+3=2;
12:   while (*(*1+3)<*(*1+1))(
13:     if (!*(*(*1+2)+*(*1+3)+1))(
14:       print(*(*1+3)); println());
15:     ++(*1+3)) }
2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97,


 1: func new { *4=*5; 4=*4+*5+1; *4-*5-1 }
 2: func sift { *2-1-1=*1; 1=*2-1-1; 2=*1+3+1; *1+2=2;
 3:   while (*(*1+2)**(*1+2)<**(*1+1))(
 4:     *1+3=*(*1+2)**(*1+2);
 5:     while (*(*1+3)<**(*1+1))(
 6:       *(*1+1)+*(*1+3)+1=1; *1+3=*(*1+3)+*(*1+2));
 7:     while (*(*(*1+1)+(++(*1+2))+1)));
 8:   2=*1; 1=**1 }
 9: func main { 1=10; 2=*1+3+1; 4=4000000; *1+1=100;
10:   5=*(*1+1); *1+2=new(); ++2; 2++=*(*1+2);
11:   sift(); *1+3=2;
12:   while (*(*1+3)<*(*1+1))(
13:     if (!*(*(*1+2)+*(*1+3)+1))(
14:       print(*(*1+3)); println());
15:     ++(*1+3)) }
2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97,


 1: func check {
 2:   while (*4>0 && !*(*5+*4%10))(
 3:     *5+*4%10=1; 4=*4/10);
 4:   !*4 }
 5: func main { 1=1234; 5=10;
 6:   while (*1<=4987)( 2=2;
 7:     while (*2<=9876/*1)( 3=0;
 8:       while (*3<10) *5+3++=0;
 9:       *5=1; *5+*2=1;
10:       if ((4=*1; check()) &&
11:           (4=*1**2; check()))(
12:         @*1; @*2; @(*1**2); #);
13:       ++2);
14:     ++1) }
1738, 4, 6952,
1963, 4, 7852,


 1: func pow { 12=1; 11=0;
 2:   while (11++<*3) 12=*12**2;
 3:   *12 }
 4: func r2n { 10=0; 9=*3-1;
 5:   while (*9>=0) 10=*10*10+*(*1+9--);
 6:   *10 }
 7: func next { 7=0; 8=1;
 8:   while (*7<*3 && *(*1+*7)==9)
 9:     *1+7++=1;
10:   if (*7<*3) ++(*1+*7) else 8=0;
11:   *8 }
12: func narci { 4=0;
13:   while (*4<*3) *1+4++=1;
14:   while (next())(
15:     5=r2n(); 4=0; 6=0;
16:     while (*6<*3)
17:       4=*4+(2=*(*1+6++); pow());
18:     if (*5==*4)(@*4; #) ) }
19: func main { 1=100; 3=2;
20:   while (++3<=6) narci() }
153, 371, 1634, 9474, 54748, 92727, 548834,


 1: func selection { 4=0;
 2:   while (*4<*2-1)( 5=*4+1; 6=*4;
 3:     while (*5<*2)(
 4:       if (*(*1+*5)<*(*1+*6)) 6=*5;
 5:       ++5);
 6:     7=*(*1+*6); *1+*6=*(*1+*4);
 7:     *1+*4=*7; ++4) }
 8: func main { 1=100; 2=0; 3=?;
 9:   while (*3!=0)( *1+2++=*3; 3=?);
10:   selection(); 3=0;
11:   while (*3<*2) @*(*1+3++); # }
4, 6, 15, 16, 54, 64, 81, 88,


 1: func insertion { 4=1; 5=0;
 2:   while (*4<*2)(
 3:     if (*(*1+*4)<*(*1+*5)) 5=*4;
 4:     ++4);
 5:   6=**1; *1=*(*1+*5);
 6:   *1+*5=*6; 4=2;
 7:   while (*4<*2)( 5=*4;
 8:     6=*(*1+*4);
 9:     while (*6<*(*1+*5-1))
10:       *1+*5=*(*1+--5);
11:     *1+*5=*6; ++4) }
12: func main { 1=100; 2=0; 3=?;
13:   while (*3!=0)( *1+2++=*3; 3=?);
14:   insertion(); 3=0;
15:   while (*3<*2) @*(*1+3++); # }
4, 6, 15, 16, 54, 64, 81, 88,


 1: func bubble { 4=0;
 2:   while (*4<*2-1)( 5=*2-1;
 3:     while (*5>*4)(
 4:       if (*(*1+*5)<*(*1+*5-1))(
 5:         6=*(*1+*5);
 6:         *1+*5=*(*1+*5-1);
 7:         *1+*5-1=*6); --5); ++4) }
 8: func main { 1=100; 2=0; 3=?;
 9:   while (*3!=0)( *1+2++=*3; 3=?);
10:   bubble(); 3=0;
11:   while (*3<*2) @*(*1+3++); # }
4, 6, 15, 16, 54, 64, 81, 88,


 1: func partition { 8=*(*3+*7);
 2:   9=*6-1; 10=*6;
 3:   while (*10<*7)(
 4:     if (*(*3+*10)<=*8)(
 5:       11=*(*3+(++9));
 6:       *3+*9=*(*3+*10);
 7:       *3+*10=*11);
 8:     ++10);
 9:   11=*(*3+*9+1);
10:   *3+*9+1=*(*3+*7);
11:   *3+*7=*11; *9+1 }
12: func quicksort {
13:   1=*1+*2; *1=*2; 2=4;
14:   if (*(*1+1)<*(*1+2))(
15:     6=*(*1+1); 7=*(*1+2);
16:     *1+3=partition();
17:     *1+*2+1=*(*1+1);
18:     *1+*2+2=*(*1+3)-1;
19:     quicksort();
20:     *1+*2+1=*(*1+3)+1;
21:     *1+*2+2=*(*1+2);
22:     quicksort() );
23:   2=**1; 1=*1-*2 }
24: func main { 1=1000; 2=0; 3=100;
25:   4=0; 5=?;
26:   while (*5!=0)( *3+4++=*5; 5=?);
27:   *1+1=0; *1+2=*4-1; quicksort(); 5=0;
28:   while (*5<*4) @*(*3+5++); # }
4, 6, 15, 16, 54, 64, 81, 88,


 1: func sift { 8=*6; 9=2**6;
 2:   10=*(*1+*6);
 3:   if (*9<*7 && *(*1+*9)<*(*1+*9+1)) ++9;
 4:   while (*9<=*7 && *10<*(*1+*9))(
 5:     *1+*8=*(*1+*9); 8=*9; 9=*9*2;
 6:     if (*9<*7 && *(*1+*9)<*(*1+*9+1)) ++9);
 7:   *1+*8=*10 }
 8: func heapsort { 4=*2/2+1;
 9:   while (--4>=1)(
10:     6=*4; 7=*2; sift());
11:   4=*2;
12:   while (*4>1)( 5=*(*1+1);
13:     *1+1=*(*1+*4); *1+*4=*5;
14:     --4; 6=1; 7=*4; sift()) }
15: func main { 1=100; 2=0; 3=?;
16:   while (*3!=0)( *1+(++2)=*3; 3=?);
17:   heapsort(); 3=1;
18:   while (*3<=*2) @*(*1+3++); # }
4, 6, 15, 16, 54, 64, 81, 88,


 1: func merge { 10=*8+1; 11=*8; 12=*7;
 2:   while (*10>*7) *6+--10=*(*3+*10);
 3:   while (*11<*9)
 4:     *6+*9+*8-*11=*(*3+(++11));
 5:   while (*12<=*9)
 6:     *3+12++=(
 7:       if (*(*6+*11)<*(*6+*10))
 8:         *(*6+11--)
 9:       else *(*6+10++)) }
10: func mergesort {
11:   1=*1+*2; *1=*2; 2=4;
12:   if (*(*1+1)<*(*1+2))(
13:     *1+3=(*(*1+1)+*(*1+2))/2;
14:     *1+*2+1=*(*1+1);
15:     *1+*2+2=*(*1+3);
16:     mergesort();
17:     *1+*2+1=*(*1+3)+1;
18:     *1+*2+2=*(*1+2);
19:     mergesort();
20:     7=*(*1+1); 8=*(*1+3);
21:     9=*(*1+2); merge());
22:   2=**1; 1=*1-*2 }
23: func main { 1=1000; 2=0; 3=100;
24:   6=500; 4=0; 5=?;
25:   while (*5!=0)( *3+4++=*5; 5=?);
26:   chk (*4<=300);
27:   *1+1=0; *1+2=*4-1; mergesort(); 5=0;
28:   while (*5<*4) @*(*3+5++); # }
4, 6, 15, 16, 54, 64, 81, 88,